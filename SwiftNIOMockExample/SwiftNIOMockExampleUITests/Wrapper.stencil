{% for service in types.based.Service %}
// sourcery:inline:{{ service.name }}.Wrapper
{% for wrapped_method in service.instanceMethods|annotated:"wrap" %}
{% set Wrapper %}{% for key, _ in wrapped_method.annotations.wrap %}{% if forloop.first %}{{ key }}{% endif %}{% endfor %}{% endset %}
private var _{{ wrapped_method.callName }}: {{ Wrapper }}<{{ service.name }}, {{ wrapped_method.returnTypeName }}> {
    func {{ wrapped_method.name }} -> {{ wrapped_method.returnTypeName }} {
        {{ wrapped_method.body | indent:4 }}
    }
    return {{ Wrapper }}({% for key, value in wrapped_method.annotations.wrap[Wrapper] %}{{ key }}{% if not forloop.last %}, {% endif %}{% endfor %}) { params in
        return {{ wrapped_method.callName }}({% if wrapped_method.parameters.count == 1 %}{{ wrapped_method.parameters.0.argumentLabel }}: params{% else %}{% for parameter in wrapped_method.parameters %}{{ parameter.argumentLabel }}: params.{{ forloop.counter0 }}{% if not forloop.last %}, {% endif %}{% endfor %}{% endif %})
    }
}
func {{ wrapped_method.name|dropFirst }} -> {{ wrapped_method.returnTypeName }} {
    _{{ wrapped_method.callName }}({% for parameter in wrapped_method.parameters %}{{ parameter.argumentLabel }}: {{ parameter.name }}{% if not forloop.last %}, {% endif %}{% endfor %})
}

{% endfor %}
// sourcery:end
{% endfor %}
